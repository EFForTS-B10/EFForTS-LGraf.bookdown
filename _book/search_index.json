[
["index.html", "EFForTS-LGraf Manual Chapter 1 Introduction to EFForTS-LGraf", " EFForTS-LGraf Manual Jan Salecker 2019-10-18 Chapter 1 Introduction to EFForTS-LGraf Spatially-explicit simulation models are commonly used to study complex ecological and socio-economic research questions. Often these models depend on detailed input data, such as initial land-cover maps to set up model simulations. Here we present the landscape generator EFFortS-LGraf that provides artificially-generated land-use maps of agricultural landscapes shaped by small-scale farms. EFForTS-LGraf is a process-based landscape generator that explicitly incorporates the human dimension of land-use change. The model generates roads and villages that consist of smallholder farming households. These smallholders use different establishment strategies to create fields in their close vicinity. Crop types are distributed to these fields based on crop fractions and specialization levels. EFForTS-LGraf model parameters such as household area or field size frequency distributions can be derived from household surveys or geospatial data. This can be an advantage over the abstract parameters of neutral landscape generators. EFForTS-LGraf can be applied both to generate maps as inputs for simulation modelling and as a stand-alone tool for specific landscape-scale analyses in the context of ecological-economic studies of smallholder farming systems. If you are interested in technical details, sensitivity analyes, model validation and application examples, please check out the accompanying publication of EFForTS-LGraf @ Plos one. If you use EFForTS-LGraf for your research please refer to this publication (citation information). EFForTS-LGraf can be downloaded from our github repository. You need NetLogo 6 to open and run the model. This manual will guide you through some examples that should get you started with EFForTS-LGraf. Chapter 2 contains information on how to setup and run EFForTS-LGraf. Chapter 3 will give you an overview of the basic functionality and parameters. Chapter 4 contains different application examples. "],
["getstarted.html", "Chapter 2 Get started 2.1 Prerequisites 2.2 Basic Functions 2.3 Parameterization 2.4 Using custom road shapefiles 2.5 EFForTS-LGraf output functions", " Chapter 2 Get started 2.1 Prerequisites In order to run EFForTS-LGraf, NetLogo 6 needs to be installed. We provide a portable version of NetLogo 6 within the github repository. Because NetLogo is executed in a Java virtual machine, Java needs to be installed on the system as well. We recommend the Oracle Java SE Development Kit 8. R and the R package nlrx, version 0.2.0 are needed in order to run some application examples of chapter 4. While the nlrx package might work without setting the Java system path explicitly, we recommend to make sure that JAVA_HOME points to the correct Java installation of the system. The R package landscapemetrics and landscapetools are needed in order to run some applications examples of chapter 4. 2.2 Basic Functions EFForTS-LGraf is structured in three submodels. First, the landscape and households are created. Second, fields are established by the households. Third, crop types are distributed to these fields. Finally, maps can be stored as ascii files. 2.3 Parameterization All parameters on the graphical user interface are numbered. The following table guides you trough parameterization of the model. nr description 1.1 First define if a randomly drawn seed will be used or set a specific seed to make map generation reproducible 1.2 Set the dimensions of the landscape in cells, and the corresponding cell resolution in meter (used for area calculations) 1.3 Choose algorithm for road creation 1.3.1 If real-road-map has been chosen in 1.3, add a string identifier for the map (see section Use own road shapefiles as road templates below for guidance on using own road shapefiles) 1.3.2 If an artificial road generation algorithm has been chosen in 1.3, define the number of road cells and the minimum distance between roads 1.3.3 If artifical.perlin has been chosen in 1.3 define the parameters for the perlin noise algorithm 1.4 Set the maximum number of trials for loops. Depending on the parameterization, a low value may result in landscapes that do not represent the specified needs accurately. Larger numbers may increase simulation time. 1.5 Define the number of households that are allowed to have a homebase on the same cell | 1.6 | Choose a setup type: number-of-households: Define a total number of households in 1.7 number-of-villages: Define a total number of villages in 1.7 proportion-agriculture: Define the final proportion of fields in the landscape in 1.7 | | 1.8 | Define household parameters. Here you can define the area distribution of households in the landscape. You can define the type of distribution from which household areas are drawn during initialization. You can also define the parameters of these distributions. | | 1.9 | Define village parameters. Here you can define the area distribution of villages (accumulation of households) in the landscape. You can define the type of distribution from which village areas are drawn during initialization. You can also define the parameters of these distributions. | | 1.10 | Define the minimum distance between villages in cells. For certain parameterizations, this distance might not be realized. In such cases, a warning will appear that distances between villages are lower than specified. | | 1.11 | This experimental feature allows to create a second type of household in the model, that uses a diferent area distribution (as defined in 1.11.2). | | 1.12 | Define inaccessible areas that are created during setup. These areas are not available for field creation by smallholder households. These areas may represent conservation areas or company plantations that are not owend by smallholders. | | 2.1 | Define the field size distribution for the field establishment procedure. | | 2.2 | Instead of defining a specific mean value for the field size distribution, you can use the field-size-percentage slider to calculate the mean dynamically, depending on the mean value of the household area distribution. | | 2.3 | The field shape factor allows you to define if fields should be mostly quadratic (value = 1) or narrow (values &gt; 1 and values &lt; 1) | | 2.4 | Select a set of field establishment strategies. Four strategies are currently implemented. Pred-defined combinations of these strategies can also be selected using parameters of 2.5. A household will try to establish a field under the current strategy for a specified number of tries (as defined in 2.6). If a household does not succeed with the current strategy, it will switch to the next strategy in numeric order (e.g. if all strategies are available and the current strategy is s1.homebase, it will switch to s2.fields). s1.homebase - Households will search for empty cells around their homebase to establish fields s2.fields - Households will search for empty cells around already established fields to establish new fields s3.nearby - Households will search for empty cells in an gradually increasing radius around their homebase s4.avoid - Households will search for empty cells around their homebase, that are only surrounded by empty cells | | 3.1 | Optionally, define names for up to five different crop types | | 3.2 | Define fractions of each cropt type. The sum of these fractions must add up to one | | 3.3 | Optionally, for each crop type define the fraction of households that only culativates this crop type. For example, if specialization of crop type 1 is set to 1, each household which cultivates crop type 1, will only cultviate this land-use type (these fractions are only used, if 3.5 land-use-types is set to household-level-specialization) | | 3.4 | Here you can define one of the 5 land-use types which is used to fill up remaining fractions if the defined fractions do not sum up to one. | 2.4 Using custom road shapefiles Instead of generating roads, EFForTS-LGraf is able to use an existing roadmap shapefile as input by selecting real.shapefile from the dropdown menu under 1.3. These shapefiles are loaded from the folder “LGraf_roadmaps” within the input folder of the model directory. Own shapefiles can be added here. Please note, own shapefiles need to follow a specified filename format as shown below. At least three files need to be available to load a roadmap shapefile: * &lt;roadmapid&gt;_road.prj - the projection file of the roadmap * &lt;roadmapid&gt;_road.shp - the actual shapefile containing road polylines * &lt;roadmapid&gt;_area.shp - a shapefile with a framing box of the road shapefile which is used to set the dimensions of the landscape You can replace &lt;roadmapid&gt; with any string, which can then be entered in the input field road-map-id under 1.3.1 to load the shapefile. For example, a valid fileset could be named “mymap1_road.prj”, “mymap1_road.shp”, “mymap1_area.shp”. This fileset can then be loaded by selecting real.shapefile under 1.3 and entering mymap1 into the input field under 1.3.1. Five roadmap shapefiles from Jambi, Indonesia are already included in EFForTS-LGraf. These shapefiles can be loaded by entering jambi1, jambi2, jambi3, jambi4 or jambi5 under 1.3.1). 2.5 EFForTS-LGraf output functions The main output function of EFForTS-LGraf is executed by pressing the “Write output” button on the GUI (IV. Paint &amp; Output). This function will write the following spatial information to disk: filename type content forest-patch-raster ASCII raster forest patch IDs hh_points_layer ESRI Shapefile Point features generated from household agents hh-tpye-1-raster ASCII raster counts of households with type 1 on each cell hh-tpye-2-raster ASCII raster counts of households with type 2 on each cell homebase-raster ASCII raster Household IDs on homebases of household agents homebase-raster_layerN ASCII raster Optional files for each layer of household homebases. Only relevant if households-per-cell &gt; 1 and only created if write-household-ids is set to “layered files” land-use-type-raster ASCII raster crop type IDs ownership-raster ASCII raster Ownerhsip household IDs of fields patch-id-raster ASCII raster Patch IDs road-raster ASCII raster Roads cells roads_polyline_layer ESRI Shapefile Road cells as polyline shapefile village-raster ASCII raster Village IDs of homebase cells The output files are written to the specified subfolder/path foldername. In order to write output, the specified folder/path need to exist. The NetLogo GIS extension allows to map the NetLogo coordinates to a specified envelope of GIS coordinates. This can be done by activating the apply-gis-envelope? switch and specifying the boundary coordinates of the GIS envelope. These coordinates are specified as a list ([minimum-x maximum-x minimum-y maximum-y]) in the input field gis-envelope. Additionally, spatial output can be created with a specified projection system. In order to set the projection, activate the switch apply-gis-projection? and specify a \"*.prj\" file with projection definitions in the input field gis-projection (see NetLogo user manual for more information). "],
["funcpar.html", "Chapter 3 Functionality and Parameterization", " Chapter 3 Functionality and Parameterization Here is a review of existing methods. "],
["application.html", "Chapter 4 Application examples", " Chapter 4 Application examples We describe our methods in this chapter. "],
["dummy-chapter.html", "Chapter 5 Dummy chapter", " Chapter 5 Dummy chapter Dummy chapter "],
["dummy-chapter-1.html", "Chapter 6 Dummy chapter", " Chapter 6 Dummy chapter Dummy chapter. "],
["references.html", "References", " References "]
]
