[
["index.html", "EFForTS-LGraf Manual Chapter 1 Introduction to EFForTS-LGraf", " EFForTS-LGraf Manual Jan Salecker 2019-10-18 Chapter 1 Introduction to EFForTS-LGraf Spatially-explicit simulation models are commonly used to study complex ecological and socio-economic research questions. Often these models depend on detailed input data, such as initial land-cover maps to set up model simulations. Here we present the landscape generator EFFortS-LGraf that provides artificially-generated land-use maps of agricultural landscapes shaped by small-scale farms. EFForTS-LGraf is a process-based landscape generator that explicitly incorporates the human dimension of land-use change. The model generates roads and villages that consist of smallholder farming households. These smallholders use different establishment strategies to create fields in their close vicinity. Crop types are distributed to these fields based on crop fractions and specialization levels. EFForTS-LGraf model parameters such as household area or field size frequency distributions can be derived from household surveys or geospatial data. This can be an advantage over the abstract parameters of neutral landscape generators. EFForTS-LGraf can be applied both to generate maps as inputs for simulation modelling and as a stand-alone tool for specific landscape-scale analyses in the context of ecological-economic studies of smallholder farming systems. If you are interested in technical details, sensitivity analyes, model validation and application examples, please check out the accompanying publication of EFForTS-LGraf @ Plos one. If you use EFForTS-LGraf for your research please refer to this publication (citation information). EFForTS-LGraf can be downloaded from our github repository. You need NetLogo 6 to open and run the model. This manual will guide you through some examples that should get you started with EFForTS-LGraf. Chapter 2 contains information on how to setup and run EFForTS-LGraf. Chapter 3 will give you an overview of the basic functionality and parameters. Chapter 4 contains different application examples. "],
["getstarted.html", "Chapter 2 Get started 2.1 Prerequisites 2.2 Basic Functions", " Chapter 2 Get started 2.1 Prerequisites In order to run EFForTS-LGraf, NetLogo 6 needs to be installed. We provide a portable version of NetLogo 6 within the github repository. Because NetLogo is executed in a Java virtual machine, Java needs to be installed on the system as well. We recommend the Oracle Java SE Development Kit 8. R and the R package nlrx, version 0.2.0 are needed in order to run some application examples of chapter 4. While the nlrx package might work without setting the Java system path explicitly, we recommend to make sure that JAVA_HOME points to the correct Java installation of the system. The R package landscapemetrics and landscapetools are needed in order to run some applications examples of chapter 4. 2.2 Basic Functions EFForTS-LGraf is structured in three submodels. First, the landscape and households are created. Second, fields are established by the households. Third, crop types are distributed to these fields. Finally, maps can be stored as ascii files. The respective parameters and buttons are color-coded and explained in Chapter 3. Figure 2.1: EFForTS-LGraf model interface "],
["funcpar.html", "Chapter 3 Functionality and Parameterization 3.1 Functionality 3.2 Parameterization 3.3 Using custom road shapefiles 3.4 EFForTS-LGraf output functions", " Chapter 3 Functionality and Parameterization 3.1 Functionality THE MODEL WORKS LIKE THAT 3.2 Parameterization All parameters on the graphical user interface are numbered. The following sections guide you through parameterization of the model. 3.2.1 Setup landscape and households The parameters in the blue colored section of the EFForTS-LGraf GUI are used for model setup. World dimensions, scale parameters, road setup, household, village and field sizes are some of the parameters that are defined in this section. Figure 3.1: Setup parameters nr description 1.1 First define if a randomly drawn seed will be used or set a specific seed to make map generation reproducible 1.2 Set the dimensions of the landscape in cells, and the corresponding cell resolution in meter (used for area calculations) 1.3 Choose algorithm for road creation 1.3.1 If real-road-map has been chosen in 1.3, add a string identifier for the map (see section Use own road shapefiles as road templates below for guidance on using own road shapefiles) 1.3.2 If an artificial road generation algorithm has been chosen in 1.3, define the number of road cells and the minimum distance between roads 1.3.3 If artifical.perlin has been chosen in 1.3 define the parameters for the perlin noise algorithm 1.4 Set the maximum number of trials for loops. Depending on the parameterization, a low value may result in landscapes that do not represent the specified needs accurately. Larger numbers may increase simulation time. 1.5 Define the number of households that are allowed to have a homebase on the same cell 1.6 Choose a setup type: - number-of-households: Define a total number of households in 1.7 - number-of-villages: Define a total number of villages in 1.7 - proportion-agriculture: Define the final proportion of fields in the landscape in 1.7 1.8 Define household parameters. Here you can define the area distribution of households in the landscape. You can define the type of distribution from which household areas are drawn during initialization. You can also define the parameters of these distributions. 1.9 Define village parameters. Here you can define the area distribution of villages (accumulation of households) in the landscape. You can define the type of distribution from which village areas are drawn during initialization. You can also define the parameters of these distributions. 1.10 Define the minimum distance between villages in cells. For certain parameterizations, this distance might not be realized. In such cases, a warning will appear that distances between villages are lower than specified. 1.11 This experimental feature allows to create a second type of household in the model, that uses a diferent area distribution (as defined in 1.11.2). 1.12 Define inaccessible areas that are created during setup. These areas are not available for field creation by smallholder households. These areas may represent conservation areas or company plantations that are not owend by smallholders. 3.2.2 Establish fields The parameters in the magenta colored section of the EFForTS-LGraf GUI are used for the field establishment procedure. Here you define the field size distribution and control the strategies that are used for field establishment. Figure 3.2: Field establishment parameters nr description 2.1 Define the field size distribution for the field establishment procedure. 2.2 Instead of defining a specific mean value for the field size distribution, you can use the field-size-percentage slider to calculate the mean dynamically, depending on the mean value of the household area distribution. 2.3 The field shape factor allows you to define if fields should be mostly quadratic (value = 1) or narrow (values &gt; 1 and values &lt; 1) 2.4 Select a set of field establishment strategies. Four strategies are currently implemented. Pred-defined combinations of these strategies can also be selected using parameters of 2.5. A household will try to establish a field under the current strategy for a specified number of tries (as defined in 2.6). If a household does not succeed with the current strategy, it will switch to the next strategy in numeric order (e.g. if all strategies are available and the current strategy is s1.homebase, it will switch to s2.fields). - s1.homebase - Households will search for empty cells around their homebase to establish fields - s2.fields - Households will search for empty cells around already established fields to establish new fields - s3.nearby - Households will search for empty cells in an gradually increasing radius around their homebase - s4.avoid - Households will search for empty cells around their homebase, that are only surrounded by empty cells 3.2.3 Distribute crops The parameters in the orange colored section of the EFForTS-LGraf GUI are used for the crop distribution procedure. Here you define the names, proportions and specialization levels of crop classes that are distributed to the fields. Figure 3.3: Crop distribution parameters nr description 3.1 Optionally, define names for up to five different crop types 3.2 Define fractions of each cropt type. The sum of these fractions must add up to one 3.3 Optionally, for each crop type define the fraction of households that only culativates this crop type. For example, if specialization of crop type 1 is set to 1, each household which cultivates crop type 1, will only cultviate this land-use type (these fractions are only used, if 3.5 land-use-types is set to household-level-specialization) 3.4 Here you can define one of the 5 land-use types which is used to fill up remaining fractions if the defined fractions do not sum up to one. 3.3 Using custom road shapefiles Instead of generating roads, EFForTS-LGraf is able to use an existing roadmap shapefile as input by selecting real.shapefile from the dropdown menu under 1.3. These shapefiles are loaded from the folder “LGraf_roadmaps” within the input folder of the model directory. Own shapefiles can be added here. Please note, own shapefiles need to follow a specified filename format as shown below. At least three files need to be available to load a roadmap shapefile: * &lt;roadmapid&gt;_road.prj - the projection file of the roadmap * &lt;roadmapid&gt;_road.shp - the actual shapefile containing road polylines * &lt;roadmapid&gt;_area.shp - a shapefile with a framing box of the road shapefile which is used to set the dimensions of the landscape You can replace &lt;roadmapid&gt; with any string, which can then be entered in the input field road-map-id under 1.3.1 to load the shapefile. For example, a valid fileset could be named “mymap1_road.prj”, “mymap1_road.shp”, “mymap1_area.shp”. This fileset can then be loaded by selecting real.shapefile under 1.3 and entering mymap1 into the input field under 1.3.1. Five roadmap shapefiles from Jambi, Indonesia are already included in EFForTS-LGraf. These shapefiles can be loaded by entering jambi1, jambi2, jambi3, jambi4 or jambi5 under 1.3.1). 3.4 EFForTS-LGraf output functions The main output function of EFForTS-LGraf is executed by pressing the “Write output” button on the GUI (IV. Paint &amp; Output). This function will write the following spatial information to disk: filename type content forest-patch-raster ASCII raster forest patch IDs hh_points_layer ESRI Shapefile Point features generated from household agents hh-tpye-1-raster ASCII raster counts of households with type 1 on each cell hh-tpye-2-raster ASCII raster counts of households with type 2 on each cell homebase-raster ASCII raster Household IDs on homebases of household agents homebase-raster_layerN ASCII raster Optional files for each layer of household homebases. Only relevant if households-per-cell &gt; 1 and only created if write-household-ids is set to “layered files” land-use-type-raster ASCII raster crop type IDs ownership-raster ASCII raster Ownerhsip household IDs of fields patch-id-raster ASCII raster Patch IDs road-raster ASCII raster Roads cells roads_polyline_layer ESRI Shapefile Road cells as polyline shapefile village-raster ASCII raster Village IDs of homebase cells The output files are written to the specified subfolder/path foldername. In order to write output, the specified folder/path need to exist. The NetLogo GIS extension allows to map the NetLogo coordinates to a specified envelope of GIS coordinates. This can be done by activating the apply-gis-envelope? switch and specifying the boundary coordinates of the GIS envelope. These coordinates are specified as a list ([minimum-x maximum-x minimum-y maximum-y]) in the input field gis-envelope. Additionally, spatial output can be created with a specified projection system. In order to set the projection, activate the switch apply-gis-projection? and specify a \"*.prj\" file with projection definitions in the input field gis-projection (see NetLogo user manual for more information). "],
["application.html", "Chapter 4 Application examples 4.1 Standalone application examples 4.2 Application examples using nlrx", " Chapter 4 Application examples In this section you will find several application examples for EFForTS-LGraf. These range from very detailed examples, covering all aspects of parameterization and output creation (e.g., 4.1.1) to small little snippets explaining only some important aspects of EFForTS-LGraf. The examples are structured in two sections. Examples in section 4.1 show how EFForTS-LGraf can be used as a standalone tool using only NetLogo. Examples in section 4.2 show how the R package nlrx can be used to automate landscape creation. 4.1 Standalone application examples 4.1.1 Example 1: A landscape from scratch 4.1.1.1 Step 1: Prerequisites In order to use EFForTS-LGraf as a standalone tool, you only need to adjust the parameters to your needs (see Section 3). Here we will show you a simple example of how this can be done. Lets imagine we performed a household survey of smallholder farmers and explicitly asked for: size of their fields (which also gives us the total size of each household) crop types on their fields From remote sensing we estimate: road density/road length within study area field area of villages 4.1.1.2 Step 2: Parameterize and execute road and household setup Figure 4.1: Setup parameters We now want to create maps along an intensity gradient with similar characteristics and need to parameterize EFForTS-LGraf: We want reproducible maps, thus we set reproducible? to TRUE and select a random-seed (1.1) Our cell size should be 50x50m and we want to simulate maps with 100x100 cells (1.2) Because we do not have road data, We use an artifical road creation algorithm (1.3, artificial.perlin) We set the number of road cells we want to create (1.3.2) Because we want to create maps along an intensity gradient, we choose the setup-type agricultural-area (1.6). We can then define the proportion of agricultural area our resulting map should have (1.7). E.g., we can create three maps, with increasing proportion of agricultural area. We calculate a household size distribution from our survey and use it to parameterize 1.8 log-normal distribution, mean = 1 ha, sd = 0.5ha We calculate a village area distribution from our survey and use it to parameterize 1.9 normal distribution, mean = 50ha, sd = 3ha We expect that one percent of the area is covered by large company plantations. We use the inaccessible area feature to create these plantations by setting the inaccessible-area-fraction to 0.1 (1.12) Once all these parameters are porperly defined, press the button “I. Setup landscape and households” to execute model initialization. This procedure will setup the initial landscape with roads, villages, households and inaccessible areas as specified. 4.1.1.3 Step 3: Parameterize and execute field establishment Figure 4.2: Field establishment parameters During model initialization, households have been created with a specific household area, drawn from the household area distribution. During the field establishment procedure, households will realize this household area by establishing fields. Each time a household establishes a field, a field size will be drawn from the defined distribution. More details on field establishment can be found in the accompanying publication. Next, we calculate the field size distribution from our survey and use it to parameterize 2.1 log-normal distribution, mean = 0.49 ha, sd = 0.77 ha Because we want to use these dsitribution values, it is important to turn use-field-size-percentage off, otherwise the mean of the distribution would be estimated depending on the defined household area distribution. We want to use all available field estaiblishment strategies (2.4) and define that households change strategies after 2 unsuccessful tries (2.6) Once all these parameters are porperly defined, press the button “II. Establish fields” to execute field establishment. 4.1.1.4 Step 4: Parameterize and execute crop distribution Figure 4.3: Crop distribution parameters Finally, from our survey we estimated a proportion of 50% rubber and 50% oilpalm on fields. We set the parameters accordingly (3.1, 3.2). Because we do not want to consider any specialization, we set the land-use-types parameter to landscape-level-fraction mode, which just distributes the fractions to the fields as accurately as possible and does not consider any specialization levels. Once all these parameters are properly defined, press the button “III. Distribute crops” to distribute crops to all fields in the landscape. 4.1.1.5 Step 5: Investigate landscape and output Figure 4.4: Output EFForTS-LGraf provides several ways to investigate model output: Performance In box “V. Model output”, the switch print-messages? can be activated to print a model performance report after each procedure execution. This report will tell you detailed information on current procedures. For example, the report will warn you if some of the specified landscape parameters could not be realized. In box “IV. Paint &amp; Output”, the switch write-param-file? can be activated to automatically store a parameter file of the current run. This can be useful for debugging purposes. The file will be saved in the main output folder as defined in the input field foldername. You can only define a folder name that is already existing in the main directory of EFForTS-LGraf (e.g. output). Paint In box “IV. Paint &amp; Output”, two main painting functions are available to display generated maps: paint.default.map will apply a predefined color scheme on the current map. The scheme can be selected from the drop-down menu below the button. paint.all lets you define a custom color scheme. You can choose from several cell variables, add labels and turn on/off certain spatial features. create-3D-map is an experimental feature that allows to spawn NetLogo agents in different shapes and colors (trees, houses) to create a 3-dimensional version of the landscape. Currently, this function displays palms and trees to represent typical crops of our case study region in Jambi, Indonesia. However, with little code adjustments, other crop types can be displayed in a similar fashion. After exeucting the button, right click on the world view and select Switch to 3D View. Plot In box “V. Model output” several plots give you some information about expected and realized size distributions of households, villages, fields and inaccessible areas. You can also check if the defined crop proportions could be realized within the generated landscape. Export In box “IV. Paint &amp; Output” you can store the current landscape as ascii/shp files by pressing the button write output. In order to define a location for output files, you need to enter an already existing subfolder directory in the foldername input field. 4.1.1.6 Step 6: Export output and load spatial data into R We might want to write our map to disk and load it into R to perform further analysis. First, we need to set the projection and gis envelope of the landscape: For example, we want to map the landscape to the envelope of the provided jambi1 road file. Thus, we define gis-envelope as [238244 243244 9789775 9794775] and activate apply-gis-envelope? Next, we use the projection file of the jambi1 road map to define the projection system. Thus, we define gis-projection as input/LGraf_roadmaps/jambi1_road.prj and activate apply-gis-projection? In order to use the default output folder, we define foldername as output and press the button write output These files can now be loaded into R as spatial objects: library(sf) library(raster) library(ggplot2) library(landscapetools) roads &lt;- sf::read_sf(&quot;1_Model/EFForTS-LGraf/output/roads_polyline_layer.shp&quot;) hhs &lt;- sf::read_sf(&quot;1_Model/EFForTS-LGraf/output/hh_points_layer.shp&quot;) lut &lt;- as.data.frame(raster(&quot;1_Model/EFForTS-LGraf/output/land-use-type-raster.asc&quot;), xy=TRUE) ggplot() + geom_raster(data=lut, aes(x=x, y=y, fill=land.use.type.raster)) + geom_sf(data=roads, color=&quot;white&quot;) + geom_sf(data=hhs, color=&quot;red&quot;) + theme_nlm() Figure 4.5: Plot generated landscape in R 4.2 Application examples using nlrx "],
["dummy-chapter.html", "Chapter 5 Dummy chapter", " Chapter 5 Dummy chapter Dummy chapter "],
["dummy-chapter-1.html", "Chapter 6 Dummy chapter", " Chapter 6 Dummy chapter Dummy chapter. "],
["references.html", "References", " References "]
]
